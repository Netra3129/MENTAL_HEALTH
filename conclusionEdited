import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
data = pd.read_csv("Importance of understanding factors contributing to depression among students(10+2). (Responses) - Form Responses 1.csv")
ages = data.Age
uAge= []
for i in ages:
    if(i not in uAge):
        uAge.append(i)
uAge.sort()
ages = uAge
# print(ages)
dataByAges ={}
# sorted the data by groups
for i in ages:
    dataByAges[i]=data[data.Age == i]
df = np.array(dataByAges[19])
qs =  data.columns


def career(res):
    if res[30] in [3, 4, 5]:
        return True
    return False
def academic(res):
    chklst=[[0,0,0,0],[0,0,0,0]]
    for i in range(17,21):
        if i==17:
            if res[i].upper() in ["MODERATE",'HEAVY']:
                chklst[0][0]=1
        elif (i==18):
            if res[i].upper() in["YES",'NO']:
                chklst[0][1]=1
        elif(i==19):
            if res[i] in[1,2,3,4]:
                chklst[0][2]=1
        elif(i==20):
            if res[i].upper() in['SELF CHOICE','PRESSURED BY SOME INDIVIDUAL','PEER']:
                chklst[0][3]=1
    for i in range(30,34):
        if(i==30):
            if res[i] in [3,4,5]:
                chklst[1][0]=1
        elif(i==31):
            if res[i].upper() in["YES",'NO']:
                chklst[1][1]=1
        elif(i==32):
            if res[i].upper() in["ACADEMIC","STUDIES","STUDY","EXAMS","EDUCATION","EXAM","ACADEMICS","STUDYING","RESOURCES","FORCED","SYLLABUS","MARKS","WORKLOAD","WORK PRESSURE","TEACHERS","DAILY"]:
                chklst[1][2]=1
        else:
            if res[i].upper() in['YES','NO']:
                chklst[1][3]=1
        for i in chklst:
            for  j in i:
                if j==0:
                    return False
                else:
                    return True
def family(res):
    chklst=[0,0]
    if res[28] in [1,2,3,4]:
        chklst[0]=1
    if res[30] in [3,4,5]:
        chklst[1]=1
    for i in chklst:
         if i==0:
             return False
    else:
        return True

def personal(res):
    chklst=[[0],[0,0,0],[0]]
    if res[10].upper()=="YES":
        chklst[2][0]=1
    if res[30] in [3,4,5]:
        chklst[0][0]=1
    for i in range(36,39):
        if(i==36):
            if res[i].upper() in ["YES"]:
                chklst[1][0]=1
        elif(i==37):
            if(res[i] in [3,4,5]):
                chklst[1][1]=1
        else:
            if(res[i].upper() == "YES"):
                chklst[1][2]=1
    for i in chklst:
        for j in i:
            if j==0:
                return False
    else:
        return True


def job(res):
    if res[30] in [3, 4, 5]:
        return True
    return False

def social(res):
    chklst=[[0,0,0,0,0,0,0,0]]
    # if res[9] in [1,2,3,4]:
    #     chklst[1][0]=1
    for i in range(21,30):
        # print(res[i])
        if i==21:
            if res[i] in [1,2,3,4,5]:
                chklst[0][0]=1
        elif i==22:
            if res[i].upper() in ['YES','NO']:
                chklst[0][1]=1
        elif i==23:
            if res[i] in [1,2,3,4,5]:
                chklst[0][2]=1
        elif i==24:
            if res[i].upper() == "YES":
                chklst[0][3]=1
        elif i==25:
            if res[i] in[1,2,3,4,5]:
                chklst[0][4]=1
        elif i==26:
            if res[i].upper() in ["YES",'NO']:
                chklst[0][5]=1
        elif i==27:
            if res[i] in [3,4,5]:
                chklst[0][6]=1
        elif i==29:
            if res[i] in ['NOT AT ALL','SEVERAL DAYS','MORE THAN HALF THE DAYS','ALWAYS']:
                chklst[0][7]=1
    for i in chklst:
        for j in i:
            if j == 0:
                return False
    else:
        return True
con={}
for i in ages:
    con[i]={"Career": 0,
           "Academic": 0,
           "Not": 0,
           'Family': 0,
           'Personal': 0,
            'Job':0,
           'Social': 0}

def forward(indiRes,age):
    CAREER=["WORK","FUTURE","CAREER","GOAL",'DAILY']
    ACADEMIC=["ACADEMIC","STUDIES","STUDY","EXAMS","EDUCATION","EXAM","ACADEMICS","STUDYING","RESOURCES","FORCED","SYLLABUS","MARKS","WORKLOAD","WORK PRESSURE","TEACHERS","DAILY"]
    NOT= ["OK","||","DON'T HAVE","NOTHING","NAN","NO",'.']
    FAMILY=["FAMILY","PARENTAL","PARENTS","MONETARY","MONEY","DAILY","FINANCIAL"]
    PERSONAL=["PERSONAL","OWN",'SOLITUDE','FEAR','CLOSED ONES','LIFE','MOBILE','MOBILITY','PORCRASTINATION','PROCRASTINATION','LONLINESS','LONELY','RELATIONSHIP','OVERTHINKING','THINKING','THING','ATTACHMENT','DAILY','SINGLE','PHOBIA','MONOTONOUS','TENSION']
    SOCIAL=['SOCIAL','JUDGEMENTAL','FRIENDS','DAILY']
    ALL=["DON'T KNOW","DK","NOT TO SAY","YES","IDEA","EVERYTHING","MANY","NOT ANT PARTICULAR THING","PARTICULAR"]
    JOB=["OFFICE","JOB","DAILY","WORK"]
    chkpts=[]
    primarySource = indiRes[32]
    # print(primarySource)
    #check whether he has career problem
    if "Career" not in chkpts:
        for i in CAREER:
            if i in str(primarySource):
                if career(indiRes):
                    chkpts.append("Career")
                    break
    # check whether he has academic problem
    if "Academic" not in chkpts:
        for i in ACADEMIC:
            if i in str(primarySource).upper():
                if academic(indiRes):
                    chkpts.append("Academic")
                    break
    # check whether he Family problem
    if "Family" not in chkpts:
        for i in FAMILY:
            if i in str(primarySource).upper():
                if family(indiRes):
                    chkpts.append("Family")
                    break
    # check whether he has job problem
    if "Job" not in chkpts:
        for i in JOB:
            if i in str(primarySource).upper():
                chkpts.append("Job")
                break
    # check whether he has Personal problem
    if "Personal" not in chkpts:
        for i in PERSONAL:
            if i in str(primarySource).upper():
                if personal(indiRes):
                    chkpts.append("Personal")
                    break
    # check whether he has social problem
    if "Social" not in chkpts:
        for i in SOCIAL:
            if i in str(primarySource).upper():
                if social(indiRes):
                    chkpts.append("Social")
                    break
    # check whether he doesn't know his problem
    for i in ALL:
        if i in str(primarySource).upper():
            # then we have to check for all his problems except job
            if(career(indiRes)):
                chkpts.append("Career")
            if(family(indiRes)):
                chkpts.append("Family")
            if(academic(indiRes)):
                chkpts.append("Academic")
            if(social(indiRes)):
                chkpts.append("Social")
            if(personal(indiRes)):
                chkpts.append("Personal")
            # after checking for all the problems and getting the desired values we will stop the loop and thus break
            break
    #now after running all if we still see that it doesn't match any problem then he has no problem
    if (len(chkpts)==0):
        chkpts.append("Not")
    # print(age)
    # print(chkpts)
    for i in chkpts:
        con[age][i]+=1

def conclusion(age):
    df = np.array(dataByAges[age])
    qs = data.columns
    # RESPONSES FOR MENTAL STABILITY = NOT WELL
    for i in df:
        forward(i, age)

for i in ages:
    conclusion(i)
print(con)
# {17:{"Career":4...}}
conWithoutNot={}
totalNot={}
totalAffected={}
for i in ages:
    conWithoutNot[i]={"Career": 0,
           "Academic": 0,
           'Family': 0,
           'Personal': 0,
            'Job':0,
           'Social': 0}
    totalNot[i]=0
    totalAffected[i]=0
for i in con:
    present={}
    for j in con[i]:
        if j != "Not":
            present[j]=con[i][j]
            totalAffected[i]+=con[i][j]
        else:
            totalNot[i]=con[i][j]
    conWithoutNot[i]=present

print(conWithoutNot)
print("Not: ",totalNot)
print("Affected:",totalAffected)

categories = list(conWithoutNot[17].keys())
num_categories = len(categories)
ages = list(conWithoutNot.keys())

plt.subplot(1,3,1)
bar_width = 0.14  # Set the width of each bar
index = [age - bar_width * (num_categories - 1) / 2 for age in ages]

for i in range(num_categories):
    values = [conWithoutNot[age][categories[i]] for age in ages]
    plt.bar(index, values, width=bar_width, label=categories[i])
    index = [idx + bar_width for idx in index]

plt.xlabel('Ages')
plt.ylabel('Frequency')
plt.xticks(ages)
plt.legend()
#bar graph
affected=[]
not_affected=[]
for i in totalAffected:
    affected.append(totalAffected[i])
    not_affected.append(totalNot[i])
total=[sum(affected),sum(not_affected)]
bar_width = 0.35
index = np.arange(len(ages))
plt.subplot(1,3,2)
plt.bar(index, affected, bar_width, label='Affected')
plt.bar(index + bar_width, not_affected, bar_width, label='Not Affected')
plt.xlabel('Ages')
plt.ylabel('Frequency')
plt.title('Affected vs. Not Affected by Age')
plt.xticks(index + bar_width / 2, ages)
plt.legend()
#piechart
labels = ["Affected students", "NOT affected students"]
sizes = total
plt.subplot(1,3,3)
plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140,radius=10)
plt.axis('equal')  # Equal aspect ratio ensures the pie chart is circular
plt.legend()
plt.show()
#line graph
car=[]
fam=[]
j=[]
aca=[]
soc=[]
per=[]
for i in ages:
    car.append(conWithoutNot[i]['Career'])
    fam.append(conWithoutNot[i]['Family'])
    j.append(conWithoutNot[i]['Job'])
    aca.append(conWithoutNot[i]['Academic'])
    soc.append(conWithoutNot[i]['Social'])
    per.append(conWithoutNot[i]['Personal'])

plt.subplot(2,3,1)
plt.plot(ages, car, marker='o', color='b', linestyle='-')
plt.xticks(ages)
# plt.xlabel('Age')
plt.ylabel('Frequency')
plt.title(' Career Factor ')
plt.grid(True)

plt.subplot(2,3,2)
plt.plot(ages, fam, marker='o', color='b', linestyle='-')
plt.xticks(ages)
# plt.xlabel('Age')
plt.ylabel('Frequency')
plt.title(' Family Factor ')
plt.grid(True)

plt.subplot(2,3,3)
plt.plot(ages, per, marker='o', color='b', linestyle='-')
plt.xticks(ages)
# plt.xlabel('Age')
plt.ylabel('Frequency')
plt.title(' Personal Factor ')
plt.grid(True)


plt.subplot(2,3,4)
plt.plot(ages, soc, marker='o', color='b', linestyle='-')
plt.xticks(ages)
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.title('Social Factor')
plt.grid(True)

plt.subplot(2,3,5)
plt.plot(ages, aca, marker='o', color='b', linestyle='-')
plt.xticks(ages)
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.title(' Academics Factor')
plt.grid(True)

plt.subplot(2,3,6)
plt.plot(ages, j, marker='o', color='b', linestyle='-')
plt.xticks(ages)
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.title('Job Factor ')
plt.grid(True)
plt.show()



